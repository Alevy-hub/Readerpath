
@model LoggedIndexModel
@{
	var type = new Dictionary<string, string> { { "PaperBook", "Książka papierowa" }, { "Ebook", "Ebook" }, { "Audiobook", "Audiobook" } };
}

<script src="https://kit.fontawesome.com/af2a249344.js" crossorigin="anonymous"></script>




<h2 class="d-flex justify-content-center align-items-center">Cześć, @Model.UserName!</h2>
<h3 class="d-flex justify-content-center align-items-center">Tutaj znajdziesz wszystko co najpotrzebniejsze!</h3>

<h4 class="text-center mt-3">Wyszukaj swoją nową przygodę!</h4>
<div class="d-flex justify-content-center">
    <form method="get" action="/Authorized/Search" class="input-group mb-3" style="max-width: 500px">
        <input type="text" class="form-control" id="query" name="query" placeholder="Tytuł książki...">
        <div class="input-group-append">
			<button class="btn btn-outline-secondary" type="submit"><i class="fa-solid fa-magnifying-glass" style="color: #c64a16;"></i></button>
        </div>
    </form>
</div>

<div id="finishedChallengeModal" class="modal">
	<div class="modal-content">
		<h2 class="text-center">GRATULACJE!!!</h2>
		<p class="text-center">Książkowy challenge na ten rok został ukończony!!!</p>
		<div class="d-flex justify-content-center">
			<button class="btn btn-primary mx-2 px-5" onclick="closeFinishedChallengeModal()">Ale jestem super</button>
		</div>
	</div>
</div>


<div class="d-flex justify-content-center align-items-center">
	<a class="btn btn-primary btn-lg w-25 py-3 mt-2" asp-action="AddNewBook">Dodaj książkę</a>
</div>

<div class="d-flex justify-content-center align-items-center mt-3">
	<a class="btn btn-outline-warning" asp-action="UpdateLog">Aktualizacja z --.08.2023 <br />Zobacz szczegóły!</a>
</div>


<div class="d-flex justify-content-center align-items-center mt-4">
	<h2>Aktualnie czytane książki</h2>
</div>

<style>
	.card {
		border-color: #c64a16;
	}

	.card-body{
		flex:0;
	}

	.list-group-item {
		border-color: #c64a16;
	}
</style>

<div class="d-flex justify-content-center flex-wrap">
	@if (Model.NowReadingBooks != null && Model.NowReadingBooks.Any())
	{
		Model.NowReadingBooks = Model.NowReadingBooks.OrderBy(nb => nb.startDate).ToList();
		@foreach (NowReadingBook nowReadingBook in Model.NowReadingBooks)
		{
			DateTime startDate = (DateTime)nowReadingBook.startDate;
			string startDateString = startDate.ToString("dd.MM.yyyy");

			<div class="card col-md-3 my-3 mx-1" style="max-width: 18rem;">
				<div class="card-body text-center">
					<h4 class="card-title">@nowReadingBook.Title</h4>
					<h6 class="card-subtitle mb-2 text-muted">@nowReadingBook.Author</h6>
					<h6 class="card-subtitle mb-2 text-muted">@nowReadingBook.Genre</h6>
				</div>
				<ul class="list-group list-group-flush">
					<li class="list-group-item">Data rozpoczęcia: @startDateString</li>
					<li class="list-group-item">Typ: @type[nowReadingBook.Type]</li>
					@if(nowReadingBook.Type == "Audiobook")
					{
						if (nowReadingBook.Duration != null || nowReadingBook.Duration != 0)
						{
							int startTime = (int)nowReadingBook.Duration;
							string minutes = (startTime % 60).ToString().PadLeft(2, '0');
							int hours = startTime / 60;
							<li class="list-group-item">Czas trwania: @hours:@minutes</li>
						}
						else
						{
							<li class="list-group-item">Czas trwania: nie podano</li>                            
						}
					}
					else
					{
						<li class="list-group-item">Ilość stron: @nowReadingBook.Pages</li>                                                
					}
				</ul>
				<div class="card-body text-center" style="padding-bottom:0">
					<a asp-action="FinishBook" asp-route-actionId="@nowReadingBook.ActionId" class="btn btn-primary">Ukończono</a>
					<button class="btn btn-primary" onclick="DeleteAction(@nowReadingBook.ActionId)">Usuń</button>
				</div>
				<div class="card-body text-center mt-1" style="padding-top:0">
					<a asp-action="AddCommentWhileReading" asp-route-actionId="@nowReadingBook.ActionId" class="btn btn-primary px-4">Dodaj komentarz</a>
				</div>
			</div>
		}
	}
	else
	{
		<p>Aktualnie nie czytasz żadnych ksiażek :)</p>
	}
</div>

<div class="d-flex justify-content-center align-items-center">
	@if (Model.MonthToClose != null)
	{
		<div class="py-3 mt-5 mx-1">
			<a class="btn btn-primary btn-lg w-100" asp-action="FinishMonth" asp-route-month="@Model.MonthToClose.ToString()" asp-route-year="@Model.YearOfMonthToClose.ToString()">Zamknij miesiąc</a>
		</div>
	}

	@if (Model.YearToClose != null)
	{
		<div class="py-3 mt-5 mx-1">
			<a class="btn btn-primary btn-lg w-100" asp-action="FinishYear" asp-route-year="@Model.YearToClose.ToString()">Zamknij rok</a>
		</div>
	}
</div>

<div id="confirmationModal" class="modal">
	<div class="modal-content">
		<p class="text-center">Czy na pewno chcesz usunąć książkę?</p>

		<div class="d-flex justify-content-center">
			<button class="btn btn-primary mx-2 px-5" onclick="saveSelection()">TAK</button>
			<button class="btn btn-primary mx-2 px-5" onclick="closeConfirmationModal()">NIE</button>
		</div>
	</div>
</div>

<div id="spinnerLoader" class="text-center mb-2" style="display:none">
	<div class="spinner-border text-loader" style="width:10rem; height:10rem;" role="status">
		<span class="sr-only">Loading...</span>
	</div>
</div>


<div id="updateModal" class="modal">
	<div class="modal-content">
		<h3 class="text-center">AKTUALIZACJA</h3>
		<p class="text-center">ReaderPath został zaktualizowany do wersji Alpha 0.0.8. Chcesz zobaczyć co się zmieniło?</p>

		<div class="d-flex justify-content-center">
			<button class="btn btn-primary mx-2 px-5" onclick="CloseWithSave('yes')">TAK</button>
			<button class="btn btn-primary mx-2 px-5" onclick="CloseWithoutSave()">NIE</button>
		</div>
		<div class="d-flex justify-content-center">
			<button class="btn btn-primary mt-2 mx-2 px-5 w-75" onclick="CloseWithSave('no')">NIE I NIE POKAZUJ MI TEGO WIĘCEJ</button>
		</div>
	</div>
</div>

<script>
	const placeholderValues = ["Harry Potter", "Wiedźmin", "Krzyżacy", "Pan Tadeusz", "Mały Książę", "Krew elfów", "451 Fahrenheita", "Dwór cierni i róż", "Mirabelka", "Wyspa Tajemnic", "Tajemniczy Ogród", "Folwark Zwierzęcy", "Nic tu po was", "Koń i jego chłopiec", "Podpalaczka", "Opowieść podręcznej", "Gołąb i Wąż", "Bezgwiezdne morze", "Przygody Tomka Sawyera", "Dziwne losy Jane Eyre", "Zanim wystygnie kawa", "Imperium burz", "A co wyście myślały?", "Lekcje chemii", "Gra o tron", "Miasto w chmurach", "Daisy Jones & The Six", "Hobbit czyli tam i z powrotem", "Mężczyzna imieniem Ove", "Kocia kawiarnia", "Ophelia mimo wszystko", "Mitologia nordycka", "Przewodnik lesbijki po katolickiej szkole", "Siedmiu mężów Evelyn Hugo", "Ostatnie życzenie", "Utracona godzina", "Utracona godzina"];
	const speed = 110;
	const pause = 800;
	var shuffledValues;

	let idToDelete;

	function DeleteAction(itemId) {
		var confirmationModal = document.getElementById("confirmationModal");
		confirmationModal.style.display = "block";
		idToDelete = itemId;
	}

	function saveSelection() {
		document.getElementById("spinnerLoader").style.display = "flex";
		fetch(`/Authorized/DeleteFromMyBooks/${idToDelete}`, {
			method: 'POST'
		})
			.then(response => {
				if (response.ok) {
					window.location.href = '/Authorized/LoggedIndex';
				} else {
					console.error('Nie udało się usunąć książki.');
					closeConfirmationModal();
					document.getElementById("spinnerLoader").style.display = "none";
				}
			})
			.catch(error => {
				console.error('Wystąpił błąd podczas wysyłania żądania:', error);
			});
	}

	function closeConfirmationModal() {
		var confirmationModal = document.getElementById("confirmationModal");
		confirmationModal.style.display = "none";
		idToDelete = null;
	}

	function shuffleArray(array) {
		for (let i = array.length - 1; i > 0; i--) {
			const j = Math.floor(Math.random() * (i + 1));
			[array[i], array[j]] = [array[j], array[i]];
		}
		return array;
	}

	function initShuffle(){
		shuffledValues = shuffleArray(placeholderValues);
	}

	function typeWriter(i = 0, index = 1, direction = 1) {
		let displayed = shuffledValues[i].slice(0, index);
		document.getElementById("query").placeholder = displayed;

		if (displayed.length >= shuffledValues[i].length) {
			setTimeout(() => typeWriter(i, index - 1, -1), pause);
		} else if (displayed.length === 0) { 
			setTimeout(() => typeWriter((i + 1) % shuffledValues.length), pause);
		} else { 
			setTimeout(() => typeWriter(i, index + direction, direction), speed);
		}
	}

	initShuffle();
	typeWriter();

	function showFinishedChallengeModal() {
		var finishedChallengeModal = document.getElementById("finishedChallengeModal");
		finishedChallengeModal.style.display = "block";
	}

	function closeFinishedChallengeModal() {
		var finishedChallengeModal = document.getElementById("finishedChallengeModal");
		finishedChallengeModal.style.display = "none";
		stopConfetti();

		$.ajax({
			url: '/Authorized/CongratsShowed', 
			type: 'POST',
			data: {},
			success: function (data) {
				console.log(data);
			},
			error: function (xhr, status, error) {
				console.error(error); 
			}
		});
	}

	function ShowUpdateModal() {
		var updateModal = document.getElementById("updateModal");
		updateModal.style.display = "block";
	}

	function CloseWithSave(element){
		fetch(`/Authorized/UpdateShowed`, {
			method: 'POST'
		})
			.then(response => {
				if (response.ok) {
					console.log('Zapisano!');
				} else {
					console.error('Nie udało się zapisać');
				}
			})
			.catch(error => {
				console.error('Wystąpił błąd podczas wysyłania żądania:', error);
			});

		stopConfetti();
		var updateModal = document.getElementById("updateModal");
		updateModal.style.display = "none";
		if(element == "yes"){
			window.location.href = '/Authorized/UpdateLog';
		}
	}

	function CloseWithoutSave(){
		stopConfetti();
		var updateModal = document.getElementById("updateModal");
		updateModal.style.display = "none";
	}
	
</script>



@if (Model.ShowCongrats == true)
{
	<script>showFinishedChallengeModal();</script>
	<script>startConfetti();</script>
}

@if (Model.ShowUpdate == true){
	<script>ShowUpdateModal();</script>
	<script>startConfetti();</script>

}