@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}

@model TBRDetailsModel

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">


<h2 class="text-center">@Model.Title</h2>

@if(Model.Deadline != "0")
{
	<h5 class="text-center">Deadline: @Model.Deadline</h5>
}

<style>
	.circle {
		width: 40px;
		height: 40px;
		border-radius: 50%;
		background-color: #1b4c4b;
		display: flex;
		justify-content: center;
		align-items: center;
		cursor: pointer;
	}

	.circle-checked{
		background-color: #c64a16;
	}

	.checkmark::before {
		content: "\2713";
		font-size: 24px;
		color: white;
	}
</style>


<div class="d-flex justify-content-center align-items-center flex-column">
	@foreach (var book in Model.TBRBooks)
	{
		string divId = book.Id.ToString() + "div";
		<div id="@divId" class="card mt-1 w-75" style="padding: 0; height: 75px;">
			<div class="card-body d-flex flex-row">
				@if (book.IsRead == true)
				{
					<div onclick="checkCircle(@book.Id)" class="circle checkmark circle-checked" id="@book.Id"></div>
				}
				else
				{
					<div onclick="checkCircle(@book.Id)" class="circle" id="@book.Id"></div>
				}
				<div class="flex-grow-1 d-flex align-items-center">
					<h5 class="card-title mx-5 text-center">@book.Title</h5>
				</div>
				<div class="dropdown">
					<button class="btn btn-primary dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
						Opcje
					</button>
					<ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
						<li><button onclick="showAddTBRBookModal('@book.Title')" class="dropdown-item">Edytuj</button></li>
						<li><button onclick="deleteBook(@book.Id, '@divId')" class="dropdown-item">Usuń</button></li>
					</ul>
				</div>
			</div>
		</div>
	}
</div>


<div class="d-flex justify-content-center align-items-center">
    <a onclick="showAddTBRBookModal()" class="btn btn-primary btn-circle py-3 mt-3">
        <i class="fas fa-plus"></i>
    </a>
</div>

<div id="addTBRBook" class="modal">
	<div class="modal-content">
		<h3 class="text-center">Dodaj książkę do TBR</h3>
		<div class="form-group mb-3 d-flex align-items-center justify-content-center align-content-center text-center flex-column">
			<label class="control-label control-label-text" for="count"><b>Tytuł książki</b></label>
			<input class="form-control form-text-input" type="text" for="title" name="title" id="tbrBookTitle" />
		</div>
		<div class="d-flex justify-content-center">
			<button id="addBook" class="btn btn-primary mx-2 px-5" onclick="confirmAddTBRBook()">Dodaj</button>
			<button class="btn btn-primary mx-2 px-5" onclick="closeModal()">Anuluj</button>
		</div>
	</div>
</div>

<script>
	function showAddTBRBookModal() {
		var addTBRBookModal = document.getElementById("addTBRBook");
		addTBRBookModal.style.display = "block";
	}

	function showAddTBRBookModal(title) {
		var addTBRBookModal = document.getElementById("addTBRBook");
		addTBRBookModal.style.display = "block";
		var titleInput = document.getElementById("tbrBookTitle");
		titleInput.value = title;
		var addButton = document.getElementById("addBook");
		addButton.innerHTML = "Zapisz";
	}

	function confirmAddTBRBook() {
		var title = document.getElementById("tbrBookTitle").value;
		
		var dataToSend = {
			title: title,
			TBRId: '@Model.TBRId'
		}

		fetch(`/Authorized/AddNewTBRBook`, {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json'
			},
			body: JSON.stringify(dataToSend)
		})
			.then(response => {
				if (response.ok) {
					console.log('Zapisano!');
					var tbrId = @Model.TBRId;
					window.location.href = `/TBRDetails/${tbrId}`;
				} else {
					console.error('Nie udało się zapisać');
				}
			})
			.catch(error => {
				console.error('Wystąpił błąd podczas wysyłania żądania:', error);
			});
	}

	function closeModal() {
		var modal = document.getElementById("addTBRBook");
		modal.style.display = "none";
	}

	function checkCircle(sender){
		var circle = document.getElementById(sender);

		fetch(`/Authorized/ChangeTBRStatus`, {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json'
			},
			body: JSON.stringify(sender)
		})
			.then(response => {
				if (response.ok) {
					console.log('Zapisano!');
				} else {
					console.error('Nie udało się zapisać');
				}
			})
			.catch(error => {
				console.error('Wystąpił błąd podczas wysyłania żądania:', error);
			});

		if(circle.classList.contains("checkmark")){
			circle.classList.remove("checkmark");
			circle.classList.remove("circle-checked");
		}
		else{
			circle.classList.add("checkmark");
			circle.classList.add("circle-checked");		
		}
	}

	function deleteBook(sender, divId){
		fetch(`/Authorized/DeleteTBRBook`, {
			method: 'DELETE',
			headers: {
				'Content-Type': 'application/json'
			},
			body: JSON.stringify(sender)
		})
			.then(response => {
				if (response.ok) {
					console.log('Usunięto!');
					var element = document.getElementById(divId);
					element.remove();
				} else {
					console.error('Nie udało się usunąć!');
				}
			})
			.catch(error => {
				console.error('Wystąpił błąd podczas wysyłania żądania:', error);
			});
	}
</script>