@model YearStatisticsModel

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script>

@{
	int row = 1;
	int rowB = 1;
	int rowP = 1;

	string thanPrevYear = (Model.BookCount - Model.PrevYearBookCount).ToString();
	bool display = true;
	if (thanPrevYear == "0") display = false;

	string moreOrLess;
	if (Model.BookCount - Model.PrevYearBookCount < 0)
	{
		thanPrevYear = (int.Parse(thanPrevYear) * -1).ToString();
		moreOrLess = "Mniej niż";
	}
	else if (Model.BookCount - Model.PrevYearBookCount == 0)
	{
		moreOrLess = "Tyle samo co";
	}
	else
	{
		moreOrLess = "Więcej niż";
	}

	string percentOfChallenge = "";
	bool isChallenge = true;
	if (Model.YearChallengeCount != 0)
	{
		percentOfChallenge = Math.Round((((float)Model.BookCount / (float)Model.YearChallengeCount) * 100), 2).ToString() + "%";
	}
	else
	{
		isChallenge = false;
	}

	string audiobooksTime = (Model.AudiobooksMinutes / 60).ToString() + ":" + (Model.AudiobooksMinutes % 60).ToString().PadLeft(2, '0');

	string avgThanPrevMonth = (Model.RatingAverage - Model.PrevYearRatingAverage).ToString("0.00");
	string avgMoreOrLess;

	if (Model.RatingAverage - Model.PrevYearRatingAverage < 0)
	{
		avgThanPrevMonth = (double.Parse(avgThanPrevMonth) * -1).ToString();
		avgMoreOrLess = "niższa niż";
	}
	else if (Model.RatingAverage - Model.PrevYearRatingAverage == 0)
	{
		avgMoreOrLess = "taka sama jak";
	}
	else
	{
		avgMoreOrLess = "większa niż";
	}

	List<string> genresNames = Model.Genres.Select(g => g.Name).ToList();
	List<int> genresCounts = Model.Genres.Select(g => g.Count).ToList();

	List<string> publishersNames = new();
	List<int> publishersCounts = new();

	if (Model.Publishers.Count > 10)
	{
		publishersNames = Model.Publishers.Where(g => g.Count > 1).Select(g => g.Name).ToList();
		publishersCounts = Model.Publishers.Where(g => g.Count > 1).Select(g => g.Count).ToList();
		publishersNames.Add("Inne");
		publishersCounts.Add(Model.Publishers.Where(g => g.Count < 2).Sum(g => g.Count));
	}
	else
	{
		publishersNames = Model.Publishers.Select(g => g.Name).ToList();
		publishersCounts = Model.Publishers.Select(g => g.Count).ToList();
	}

	List<int> countsOfRatings = new();
	countsOfRatings.Add(Model.Books.Count(b => Math.Round(b.Rating) == 5));
	countsOfRatings.Add(Model.Books.Count(b => Math.Round(b.Rating) == 4));
	countsOfRatings.Add(Model.Books.Count(b => Math.Round(b.Rating) == 3));
	countsOfRatings.Add(Model.Books.Count(b => Math.Round(b.Rating) == 2));
	countsOfRatings.Add(Model.Books.Count(b => Math.Round(b.Rating) == 1));
	countsOfRatings.Add(Model.Books.Count(b => Math.Round(b.Rating) == 0));
}

<div style="display: flex; align-items: center; justify-content: center;">
	<h2>Statystyki @Model.Year</h2>
</div>

<div class="mt-3" style="display: flex; flex-direction: column; align-items: center; justify-content: center;">
	<h4>W tym roku przeczytano</h4>
	<h1 style="color: #b53905"><b>@Model.BookCount</b></h1>
	<h4>książek</h4>
</div>

<h2 class="mt-3" style="display: flex; align-items: center; justify-content: center;">Jest to</h2>
<div class="row" style="display: flex; justify-content: center; align-items: center;">
	<div class="col-md-4 text-center" style="display: flex; flex-direction: column; align-items: center; align-self: center;">
		@if (display)
		{
			<h2 style="color: #b53905">@thanPrevYear</h2>
		}
		<h4>@moreOrLess w poprzednim roku</h4>
	</div>
	@if (isChallenge)
	{
		<div class="col-md-4 text-center" style="display: flex; flex-direction: column; align-items: center; align-self: center;">
			<h2 style="color: #b53905">@percentOfChallenge</h2>
			<h4>Twojego challengu na ten rok</h4>
		</div>
	}
</div>

<h2 class="mt-3" style="display: flex; align-items: center; justify-content: center;">W tym</h2>
<div class="row mt-3" style="display: flex; justify-content: center; align-items: center;">
	<div class="col-md-3 text-center" style="display: flex; flex-direction: column; align-items: center; align-self: center;">
		<h4>Książki papierowe</h4>
		<h2 style="color: #b53905">@Model.PaperBooksCount</h2>
	</div>
	<div class="col-md-3 text-center" style="display: flex; flex-direction: column; align-items: center; align-self: center;">
		<h4>Ebooki</h4>
		<h2 style="color: #b53905">@Model.EbooksCount</h2>
	</div>
	<div class="col-md-3 text-center" style="display: flex; flex-direction: column; align-items: center; align-self: center;">
		<h4>Audiobooki</h4>
		<h2 style="color: #b53905">@Model.AudiobooksCount</h2>
	</div>
</div>

<h2 class="mt-3" style="display: flex; align-items: center; justify-content: center;">Czyli...</h2>
<div class="row mt-3" style="display: flex; justify-content: center; align-items: center;">
	<div class="col-md-3 text-center" style="display: flex; flex-direction: column; align-items: center; align-self: center;">
		<h2 style="color: #b53905">@Model.PagesCount</h2>
		<h4>stron książek</h4>
	</div>
	@if (Model.AudiobooksMinutes > 0)
	{
		<div class="col-md-3 text-center" style="display: flex; flex-direction: column; align-items: center; align-self: center;">
			<h2 style="color: #b53905">@audiobooksTime</h2>
			<h4>godzin audiobooków</h4>
		</div>
	}
</div>

<div class="mt-3" style="display: flex; flex-direction: column; align-items: center; justify-content: center;">
	<h4>Średnia ocen</h4>
	<h1 style="color: #b53905"><b>@Math.Round(Model.RatingAverage,2)</b></h1>
</div>

<div class="row mt-3" style="display: flex; justify-content: center; align-items: center;">
	<div class="col-md-3 text-center" style="display: flex; flex-direction: column; align-items: center; align-self: center;">
		<h4>Średnia @avgMoreOrLess w poprzednim roku o</h4>
		<h2 style="color: #b53905">@avgThanPrevMonth</h2>
	</div>
	<div class="col-md-3 text-center" style="display: flex; flex-direction: column; align-items: center; align-self: center;">
		<h4>Ulubiony gatunek</h4>
		<h2 style="color: #b53905">@Model.FavouriteGenre</h2>
	</div>
</div>

@if (Model.BestBook != null && Model.WorstBook != null)
{
	<div class="row mt-3" style="display: flex; justify-content: center; align-items: center;">
		<div class="col-md-4 text-center" style="display: flex; flex-direction: column; align-items: center; align-self: center;">
			<h4>Najlepsza książka miesiąca</h4>
			<h2 style="color: #b53905"><b>@Model.BestBook</b></h2>
		</div>
		<div class="col-md-4 text-center" style="display: flex; flex-direction: column; align-items: center; align-self: center;">
			<h4>Najgorsza książka miesiąca</h4>
			<h2 style="color: #b53905"><b>@Model.WorstBook</b></h2>
		</div>
	</div>
}

<div class="row mt-5" style="display: flex; justify-content: center; align-items: center;">
	<div class="col-md-5">
		<h3 class="text-center">Przeczytane w tym roku gatunki</h3>
		<table class="table table-striped">
			<thead>
				<tr>
					<th scope="col">#</th>
					<th scope="col">Gatunek</th>
					<th scope="col" class="text-center">Liczba</th>
				</tr>
			</thead>
			<tbody>
				@foreach (GenreWithCount genre in Model.Genres)
				{
					<tr>
						<th scope="row">@row</th>
						<td>@genre.Name</td>
						<td class="text-center">@genre.Count</td>
					</tr>
					row++;
				}
			</tbody>
		</table>
	</div>
	<canvas id="genresChart" style="width:100%;max-width:600px"></canvas>

</div>

<div class="row mt-5" style="display: flex; justify-content: center; align-items: center;">
	<div class="col-md-7">
		<h3 class="text-center">Przeczytane w tym roku książki</h3>
		<table class="table table-striped">
			<thead>
				<tr>
					<th scope="col">#</th>
					<th scope="col">Tytuł</th>
					<th scope="col">Typ</th>
					<th class="text-center" scope="col">Ocena</th>
				</tr>
			</thead>
			<tbody>
				@foreach (BookWithRating book in Model.Books)
				{
					<tr>
						<th scope="row">@rowB</th>
						<td>@book.Title</td>
						<td>@book.StringType</td>
						@if (book.Rating == 0)
						{
							<td class="text-center">Brak oceny</td>
						}
						else
						{
							<td class="text-center">@book.Rating</td>
						}
					</tr>
					rowB++;
				}
			</tbody>
		</table>
	</div>
	<canvas id="typeCountChart" style="width:100%;max-width:600px"></canvas>
	<canvas id="ratingCountChart" style="width:100%;max-width:600px"></canvas>

</div>

<div class="row mt-5" style="display: flex; justify-content: center; align-items: center;">
	<div class="col-md-5">
		<h3 class="text-center">Wydawnictwa w tym roku</h3>
		<table class="table table-striped">
			<thead>
				<tr>
					<th scope="col">#</th>
					<th scope="col">Nazwa</th>
					<th class="text-center" scope="col">Liczba</th>
				</tr>
			</thead>
			<tbody>
				@foreach (PublisherWithCount publisher in Model.Publishers)
				{
					<tr>
						<th scope="row">@rowP</th>
						<td>@publisher.Name</td>
						<td class="text-center">@publisher.Count</td>
					</tr>
					rowP++;
				}
			</tbody>
		</table>
	</div>
	<canvas id="publishersChart" style="width:100%;max-width:600px"></canvas>

</div>

<h3 class="text-center mt-5">Rozkład książek przeczytanych w tym roku</h3>
<div class="d-flex justify-content-center align-items-center mt-3">
	<canvas id="myChart" style="width:100%;max-width:800px"></canvas>
</div>
<div id="monthCountData" data-monthcount='@Json.Serialize(Model.MonthCounts)'></div>

<script>
	var monthCountData = JSON.parse(document.getElementById('monthCountData').getAttribute('data-monthcount'));
	var months = [
		"Styczeń",
		"Luty",
		"Marzec",
		"Kwiecień",
		"Maj",
		"Czerwiec",
		"Lipiec",
		"Sierpień",
		"Wrzesień",
		"Październik",
		"Listopad",
		"Grudzień"
	];

	new Chart("myChart", {
		type: "line",
		data: {
			labels: months,
			datasets: [{
				borderColor: "rgba(198, 74, 22,0.5)",
				data: monthCountData
			}]
		},
		options: {legend: {display: false}}
	});
</script>

<script>
	var xValues = @Json.Serialize(genresNames);
	var yValues = @Json.Serialize(genresCounts);
	var barColors = [
		"#b91d47",
		"#00aba9",
		"#2b5797",
		"#e8c3b9",
		"#1e7145",
		"#ff5733",
		"#ffc300",
		"#8a2be2",
		"#ff1493",
		"#00ff7f",
		"#0074cc",
		"#f06c00",
		"#7c4dff",
		"#ff6384",
		"#36a2eb",
		"#ff4500",
		"#32cd32",
		"#ff8c00",
		"#9400d3",
		"#da70d6"
	];

	function randomSort() {
		return 0.5 - Math.random(); 
	}

	barColors.sort(randomSort);

	new Chart("genresChart", {
		type: "doughnut",
		data: {
			labels: xValues,
			datasets: [{
				backgroundColor: barColors,
				data: yValues
			}]
		},
		options: {
		}
	});
</script>

<script>
	var xValues = @Json.Serialize(publishersNames);
	var yValues = @Json.Serialize(publishersCounts);
	var barColors = [
		"#b91d47",
		"#00aba9",
		"#2b5797",
		"#e8c3b9",
		"#1e7145",
		"#ff5733",
		"#ffc300",
		"#8a2be2",
		"#ff1493",
		"#00ff7f",
		"#0074cc",
		"#f06c00",
		"#7c4dff",
		"#ff6384",
		"#36a2eb"
	];

	function randomSort() {
		return 0.5 - Math.random();
	}

	barColors.sort(randomSort);

	new Chart("publishersChart", {
		type: "doughnut",
		data: {
			labels: xValues,
			datasets: [{
				backgroundColor: barColors,
				data: yValues
			}]
		},
		options: {
		}
	});
</script>

<script>
	var xValues = [
		"Książki papierowe",
		"Ebooki",
		"Audiobooki"
	];
	var yValues = [
		@Json.Serialize(Model.PaperBooksCount),
		@Json.Serialize(Model.EbooksCount),
		@Json.Serialize(Model.AudiobooksCount)
	];
	var barColors = [
		"#b91d47",
		"#00aba9",
		"#2b5797",
		"#e8c3b9",
		"#1e7145",
		"#ff5733",
		"#ffc300",
		"#8a2be2",
		"#ff1493",
		"#00ff7f",
		"#0074cc",
		"#f06c00",
		"#7c4dff",
		"#ff6384",
		"#36a2eb"
	];

	function randomSort() {
		return 0.5 - Math.random();
	}

	barColors.sort(randomSort);

	new Chart("typeCountChart", {
		type: "doughnut",
		data: {
			labels: xValues,
			datasets: [{
				backgroundColor: barColors,
				data: yValues
			}]
		},
		options: {
			title: {
				display: true,
				text: "Rozkład typów książek"
			}
		}
	});
</script>

<script>
	var xValues = [
		"5",
		"4",
		"3",
		"2",
		"1",
		"Nie oceniono"
	];
	var yValues = @Json.Serialize(countsOfRatings);
	var barColors = [
		"#b91d47",
		"#00aba9",
		"#2b5797",
		"#e8c3b9",
		"#1e7145",
		"#ff5733",
		"#ffc300",
		"#8a2be2",
		"#ff1493",
		"#00ff7f",
		"#0074cc",
		"#f06c00",
		"#7c4dff",
		"#ff6384",
		"#36a2eb"
	];

	function randomSort() {
		return 0.5 - Math.random();
	}

	barColors.sort(randomSort);

	new Chart("ratingCountChart", {
		type: "doughnut",
		data: {
			labels: xValues,
			datasets: [{
				backgroundColor: barColors,
				data: yValues
			}]
		},
		options: {
			title: {
				display: true,
				text: "Rozkład ocen książek"
			}
		}
	});
</script>